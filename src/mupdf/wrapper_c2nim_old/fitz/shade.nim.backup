##  Copyright (C) 2004-2021 Artifex Software, Inc.
##
##  This file is part of MuPDF.
##
##  MuPDF is free software: you can redistribute it and/or modify it under the
##  terms of the GNU Affero General Public License as published by the Free
##  Software Foundation, either version 3 of the License, or (at your option)
##  any later version.
##
##  MuPDF is distributed in the hope that it will be useful, but WITHOUT ANY
##  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
##  FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
##  details.
##
##  You should have received a copy of the GNU Affero General Public License
##  along with MuPDF. If not, see <https://www.gnu.org/licenses/agpl-3.0.en.html>
##
##  Alternative licensing terms are available from the licensor.
##  For commercial licensing, see <https://www.artifex.com/> or contact
##  Artifex Software, Inc., 1305 Grant Avenue - Suite 200, Novato,
##  CA 94945, U.S.A., +1(415)492-9861, for further information.

import
  mupdf/fitz/system, mupdf/fitz/context, mupdf/fitz/geometry, mupdf/fitz/store,
  mupdf/fitz/pixmap, mupdf/fitz/compressed-buffer

## *
##  The shading code uses gouraud shaded triangle meshes.
##

const
  FZ_FUNCTION_BASED* = 1
  FZ_LINEAR* = 2
  FZ_RADIAL* = 3
  FZ_MESH_TYPE4* = 4
  FZ_MESH_TYPE5* = 5
  FZ_MESH_TYPE6* = 6
  FZ_MESH_TYPE7* = 7

## *
## 	Structure is public to allow derived classes. Do not
## 	access the members directly.
##

type
  INNER_C_STRUCT_shade_101* {.importc: "fz_shade::no_name", header: "shade.h", bycopy.} = object
    extend* {.importc: "extend".}: array[2, cint]
    coords* {.importc: "coords".}: array[2, array[3, cfloat]] ##  (x,y,r) twice

  INNER_C_STRUCT_shade_101* {.importc: "fz_shade::no_name", header: "shade.h", bycopy.} = object
    vprow* {.importc: "vprow".}: cint
    bpflag* {.importc: "bpflag".}: cint
    bpcoord* {.importc: "bpcoord".}: cint
    bpcomp* {.importc: "bpcomp".}: cint
    x0* {.importc: "x0".}: cfloat
    x1* {.importc: "x1".}: cfloat
    y0* {.importc: "y0".}: cfloat
    y1* {.importc: "y1".}: cfloat
    c0* {.importc: "c0".}: array[fz_Max_Colors, cfloat]
    c1* {.importc: "c1".}: array[fz_Max_Colors, cfloat]

  INNER_C_STRUCT_shade_101* {.importc: "fz_shade::no_name", header: "shade.h", bycopy.} = object
    matrix* {.importc: "matrix".}: FzMatrix
    xdivs* {.importc: "xdivs".}: cint
    ydivs* {.importc: "ydivs".}: cint
    domain* {.importc: "domain".}: array[2, array[2, cfloat]]
    fnVals* {.importc: "fn_vals".}: ptr cfloat

  INNER_C_UNION_shade_101* {.importc: "fz_shade::no_name", header: "shade.h", bycopy,
                            union.} = object
    lOrR* {.importc: "l_or_r".}: INNER_C_STRUCT_shade_101
    m* {.importc: "m".}: INNER_C_STRUCT_shade_101
    f* {.importc: "f".}: INNER_C_STRUCT_shade_101

  FzShade* {.importc: "fz_shade", header: "shade.h", bycopy.} = object
    storable* {.importc: "storable".}: FzStorable
    bbox* {.importc: "bbox".}: FzRect ##  can be fz_infinite_rect
    colorspace* {.importc: "colorspace".}: ptr FzColorspace
    matrix* {.importc: "matrix".}: FzMatrix ##  matrix from pattern dict
    useBackground* {.importc: "use_background".}: cint ##  background color for fills but not 'sh'
    background* {.importc: "background".}: array[fz_Max_Colors, cfloat] ##  Just to be confusing, PDF Shadings of Type 1 (Function Based
                                                                   ##  Shadings), do NOT use_function, but all the others do. This
                                                                   ##  is because Type 1 shadings take 2 inputs, whereas all the
                                                                   ##  others (when used with a function take 1 input. The type 1
                                                                   ##  data is in the 'f' field of the union below.
    useFunction* {.importc: "use_function".}: cint
    function* {.importc: "function".}: array[256, array[fz_Max_Colors + 1, cfloat]]
    `type`* {.importc: "type".}: cint ##  function, linear, radial, mesh
    u* {.importc: "u".}: INNER_C_UNION_shade_101
    buffer* {.importc: "buffer".}: ptr FzCompressedBuffer


## *
## 	Increment the reference count for the shade structure. The
## 	same pointer is returned.
##
## 	Never throws exceptions.
##

proc fzKeepShade*(ctx: ptr FzContext; shade: ptr FzShade): ptr FzShade {.cdecl,
    importc: "fz_keep_shade", header: "shade.h".}
## *
## 	Decrement the reference count for the shade structure. When
## 	the reference count hits zero, the structure is freed.
##
## 	Never throws exceptions.
##

proc fzDropShade*(ctx: ptr FzContext; shade: ptr FzShade) {.cdecl,
    importc: "fz_drop_shade", header: "shade.h".}
## *
## 	Bound a given shading.
##
## 	shade: The shade to bound.
##
## 	ctm: The transform to apply to the shade before bounding.
##
## 	r: Pointer to storage to put the bounds in.
##
## 	Returns r, updated to contain the bounds for the shading.
##

proc fzBoundShade*(ctx: ptr FzContext; shade: ptr FzShade; ctm: FzMatrix): FzRect {.cdecl,
    importc: "fz_bound_shade", header: "shade.h".}
type
  FzShadeColorCache* = fzShadeColorCache

proc fzDropShadeColorCache*(ctx: ptr FzContext; cache: ptr FzShadeColorCache) {.cdecl,
    importc: "fz_drop_shade_color_cache", header: "shade.h".}
## *
## 	Render a shade to a given pixmap.
##
## 	shade: The shade to paint.
##
## 	override_cs: NULL, or colorspace to override the shades
## 	inbuilt colorspace.
##
## 	ctm: The transform to apply.
##
## 	dest: The pixmap to render into.
##
## 	color_params: The color rendering settings
##
## 	bbox: Pointer to a bounding box to limit the rendering
## 	of the shade.
##
## 	eop: NULL, or pointer to overprint bitmap.
##
## 	cache: *cache is used to cache color information. If *cache is NULL it
## 	is set to point to a new fz_shade_color_cache. If cache is NULL it is
## 	ignored.
##

proc fzPaintShade*(ctx: ptr FzContext; shade: ptr FzShade;
                  overrideCs: ptr FzColorspace; ctm: FzMatrix; dest: ptr FzPixmap;
                  colorParams: FzColorParams; bbox: FzIrect; eop: ptr FzOverprint;
                  cache: ptr ptr FzShadeColorCache) {.cdecl,
    importc: "fz_paint_shade", header: "shade.h".}
## *
## 	Handy routine for processing mesh based shades
##

type
  FzVertex* {.importc: "fz_vertex", header: "shade.h", bycopy.} = object
    p* {.importc: "p".}: FzPoint
    c* {.importc: "c".}: array[fz_Max_Colors, cfloat]


## *
## 	Callback function type for use with
## 	fz_process_shade.
##
## 	arg: Opaque pointer from fz_process_shade caller.
##
## 	v: Pointer to a fz_vertex structure to populate.
##
## 	c: Pointer to an array of floats used to populate v.
##

type
  FzShadePrepareFn* = proc (ctx: ptr FzContext; arg: pointer; v: ptr FzVertex;
                         c: ptr cfloat) {.cdecl.}

## *
## 	Callback function type for use with
## 	fz_process_shade.
##
## 	arg: Opaque pointer from fz_process_shade caller.
##
## 	av, bv, cv: Pointers to a fz_vertex structure describing
## 	the corner locations and colors of a triangle to be
## 	filled.
##

type
  FzShadeProcessFn* = proc (ctx: ptr FzContext; arg: pointer; av: ptr FzVertex;
                         bv: ptr FzVertex; cv: ptr FzVertex) {.cdecl.}

## *
## 	Process a shade, using supplied callback functions. This
## 	decomposes the shading to a mesh (even ones that are not
## 	natively meshes, such as linear or radial shadings), and
## 	processes triangles from those meshes.
##
## 	shade: The shade to process.
##
## 	ctm: The transform to use
##
## 	prepare: Callback function to 'prepare' each vertex.
## 	This function is passed an array of floats, and populates
## 	a fz_vertex structure.
##
## 	process: This function is passed 3 pointers to vertex
## 	structures, and actually performs the processing (typically
## 	filling the area between the vertexes).
##
## 	process_arg: An opaque argument passed through from caller
## 	to callback functions.
##

proc fzProcessShade*(ctx: ptr FzContext; shade: ptr FzShade; ctm: FzMatrix;
                    scissor: FzRect; prepare: ptr FzShadePrepareFn;
                    process: ptr FzShadeProcessFn; processArg: pointer) {.cdecl,
    importc: "fz_process_shade", header: "shade.h".}
##  Implementation details: subject to change.
## *
## 	Internal function to destroy a
## 	shade. Only exposed for use with the fz_store.
##
## 	shade: The reference to destroy.
##

proc fzDropShadeImp*(ctx: ptr FzContext; shade: ptr FzStorable) {.cdecl,
    importc: "fz_drop_shade_imp", header: "shade.h".}